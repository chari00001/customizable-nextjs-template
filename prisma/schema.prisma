// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  site          Site?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

// Site Models
model Site {
  id              String        @id @default(cuid())
  name            String
  description     String?
  url             String
  logo            String?
  favicon         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  settings        SiteSettings?
  pages           Page[]        @relation("SitePages")
  posts           Post[]        @relation("SitePosts")
  contacts        Contact[]     @relation("SiteContacts")
  socialMedia     SocialMedia?
  owner           User          @relation(fields: [ownerId], references: [id])
  ownerId         String        @unique
}

model SiteSettings {
  id              String   @id @default(cuid())
  siteId          String   @unique
  site            Site     @relation(fields: [siteId], references: [id])
  theme           String?
  analytics       Json?
  customCss       String?
  customJs        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SocialMedia {
  id        String   @id @default(cuid())
  siteId    String   @unique
  site      Site     @relation(fields: [siteId], references: [id])
  facebook  String?
  twitter   String?
  instagram String?
  linkedin  String?
  youtube   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Content Models
model Page {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String?   @db.Text
  excerpt     String?
  status      Status    @default(DRAFT)
  isHomePage  Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  site        Site      @relation("SitePages", fields: [siteId], references: [id])
  siteId      String
  images      Image[]   @relation("PageImages")
  scripts     Script[]  @relation("PageScripts")
  seo         SEO?      @relation("PageSEO")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  content     String?   @db.Text
  excerpt     String?
  status      Status    @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  site        Site      @relation("SitePosts", fields: [siteId], references: [id])
  siteId      String
  coverImage  String?
  category    Category? @relation("PostCategory", fields: [categoryId], references: [id])
  categoryId  String?
  images      Image[]   @relation("PostImages")
  scripts     Script[]  @relation("PostScripts")
  seo         SEO?      @relation("PostSEO")
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]   @relation("PostCategory")
}

model Image {
  id        String   @id @default(cuid())
  url       String
  filename  String
  size      Int
  mimeType  String
  alt       String?
  pages     Page[]   @relation("PageImages")
  posts     Post[]   @relation("PostImages")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Script {
  id          String   @id @default(cuid())
  name        String
  content     String   @db.Text
  type        String   @default("text/javascript")
  isActive    Boolean  @default(true)
  pages       Page[]   @relation("PageScripts")
  posts       Post[]   @relation("PostScripts")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Contact Model
model Contact {
  id        String    @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String    @db.Text
  isRead    Boolean   @default(false)
  isStarred Boolean   @default(false)
  readAt    DateTime?
  site      Site      @relation("SiteContacts", fields: [siteId], references: [id])
  siteId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// SEO Model
model SEO {
  id          String   @id @default(cuid())
  title       String?
  description String?
  keywords    String?
  ogTitle     String?
  ogDesc      String?
  ogImage     String?
  pageId      String?  @unique
  page        Page?    @relation("PageSEO", fields: [pageId], references: [id])
  postId      String?  @unique
  post        Post?    @relation("PostSEO", fields: [postId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
